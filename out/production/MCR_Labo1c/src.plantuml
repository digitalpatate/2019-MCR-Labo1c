@startuml

title __SRC's Class Diagram__\n

  package  {
    interface Bouncer.Bouncable {
        {abstract} + draw()
        {abstract} + move()
        {abstract} + getRenderer()
        {abstract} + getColor()
        {abstract} + getShape()
    }
  }
  

  package  {
    class Bouncer.BounceApp {
        - bouncers : LinkedList<Bouncer.Bouncable>
        - NB_CIRCLE : int
        - NB_SQUARE : int
        - MAXSHAPESIZE : int
        + Bouncer.BounceApp()
        + loop()
        {static} + main()
    }
  }
  

  package  {
    abstract class Bouncer.Bouncer {
        - positionX : int
        - positionY : int
        - width : int
        - heigth : int
        - shape : RectangularShape
        + Bouncer.Bouncer()
        + draw()
        + move()
        + getColor()
        + getShape()
        + getPositionX()
        + getPositionY()
        + getWidth()
        + getHeigth()
    }
  }
  

  package  {
    class Displayer.BouncerDisplayer {
        {static} - instance : Displayer.BouncerDisplayer
        - frame : JFrame
        - panel : JPanel
        {static} - panelHeight : int
        {static} - panelWidth : int
        {static} - panelColor : Color
        - image : BufferedImage
        - Displayer.BouncerDisplayer()
        {static} + getInstance()
        + getWidth()
        + getHeight()
        + getGraphics()
        + repaint()
        + setTitle()
        + addKeyListener()
    }
  }
  

  package  {
    abstract class Bouncer.Circle {
        {static} - random : Random
        + Bouncer.Circle()
        + Bouncer.Circle()
    }
  }
  

  package  {
    interface Displayer.Displayer {
        {abstract} + getWidth()
        {abstract} + getHeight()
        {abstract} + getGraphics()
        {abstract} + repaint()
        {abstract} + setTitle()
        {abstract} + addKeyListener()
    }
  }
  

  package  {
    class Factory.EmptyShapeFactory {
        {static} - instance : Factory.EmptyShapeFactory
        - Factory.EmptyShapeFactory()
        {static} + getInstance()
        + createCircle()
        + createSquare()
    }
  }
  

  package  {
    class Renderer.EmptyShapeRenderer {
        {static} - instance : Renderer.EmptyShapeRenderer
        {static} + getInstance()
        + display()
    }
  }
  

  package  {
    class Factory.FilledShapeFactory {
        {static} - instance : Factory.FilledShapeFactory
        - Factory.FilledShapeFactory()
        {static} + getInstance()
        + createCircle()
        + createSquare()
    }
  }
  

  package  {
    class Renderer.FilledShapeRenderer {
        {static} - instance : Renderer.FilledShapeRenderer
        {static} + getInstance()
        + display()
    }
  }
  

  package  {
    class MotionVector {
        - horizontal : int
        - vertical : int
        + MotionVector()
        + getHorizontal()
        + setHorizontal()
        + getVertical()
        + setVertical()
    }
  }
  

  package  {
    interface Renderer.Renderable {
        {abstract} + display()
    }
  }
  

  package  {
    abstract class Factory.ShapeFactory {
        {abstract} + createCircle()
        {abstract} + createSquare()
    }
  }
  

  package  {
    abstract class Renderer.BouncerRenderer {
        {abstract} + display()
    }
  }
  

  package  {
    abstract class Bouncer.Square {
        {static} - random : Random
        + Bouncer.Square()
        + Bouncer.Square()
    }
  }
  

  Bouncer.BounceApp o-- Displayer.Displayer : displayer
  Bouncer.Bouncer -up-|> Bouncer.Bouncable
  Bouncer.Bouncer o-- MotionVector : mVector
  Displayer.BouncerDisplayer -up-|> Displayer.Displayer
  Bouncer.Circle -up-|> Bouncer.Bouncer
  Factory.EmptyShapeFactory -up-|> Factory.ShapeFactory
  Renderer.EmptyShapeRenderer -up-|> Renderer.Renderable
  Factory.FilledShapeFactory -up-|> Factory.ShapeFactory
  Renderer.FilledShapeRenderer -up-|> Renderer.Renderable
  Renderer.BouncerRenderer -up-|> Renderer.Renderable
  Bouncer.Square -up-|> Bouncer.Bouncer


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
